plugins {
	java
	id("org.springframework.boot") version "3.5.5"
	id("io.spring.dependency-management") version "1.1.7"
}

group = "com.ddbs"
version = "0.0.1-SNAPSHOT"
description = "User Service"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom(configurations.annotationProcessor.get())
	}
	all {
		exclude(group = "org.springframework.boot", module = "spring-boot-starter-logging")
		exclude(group = "org.apache.logging.log4j", module = "log4j-to-slf4j")
		exclude(group = "org.slf4j", module = "slf4j-reload4j")

		exclude(group = "com.sun.jersey")
		exclude(group = "com.sun.jersey.contribs")
		exclude(group = "org.glassfish.hk2.external")
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.cloud:spring-cloud-dependencies:2025.0.0")
	}
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
	implementation("org.springframework.boot:spring-boot-starter-jdbc")
	implementation("org.springframework.boot:spring-boot-starter-web")
//	implementation("org.springframework.boot:spring-boot-starter-log4j2")
	implementation("jakarta.persistence:jakarta.persistence-api:3.2.0")
	implementation("org.springframework:spring-jdbc:6.2.10")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	compileOnly("org.projectlombok:lombok:1.18.38")
	implementation("org.apache.spark:spark-core_2.13:3.5.3") {
		exclude(group = "org.eclipse.jetty")
		exclude(group = "javax.servlet")
//		exclude(group = "javax.ws.rs")
//		exclude(group = "com.sun.jersey")
//		exclude(group = "org.glassfish.jersey.core")
//		exclude(group = "org.glassfish.jersey.containers")
//		exclude(group = "org.glassfish.jersey.inject")
		exclude(group = "org.slf4j")
//		exclude(group = "org.apache.logging.log4j")
	}
	implementation("org.eclipse.jetty:jetty-server:11.0.21")
	implementation("org.eclipse.jetty:jetty-servlet:11.0.21")

	implementation("org.apache.spark:spark-sql_2.13:3.5.3") {
//		exclude(group = "org.eclipse.jetty")
//		exclude(group = "javax.ws.rs")
//		exclude(group = "com.sun.jersey")
//		exclude(group = "org.glassfish.jersey.core")
//		exclude(group = "org.glassfish.jersey.containers")
//		exclude(group = "org.glassfish.jersey.inject")
		exclude(group = "org.slf4j")
//		exclude(group = "org.apache.logging.log4j")
	}

//	implementation("org.glassfish.jersey.containers:jersey-container-servlet:2.41")
//	implementation("org.glassfish.jersey.core:jersey-server:2.41")
//	implementation("org.glassfish.jersey.inject:jersey-hk2:2.41")

	implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.3.0")
	runtimeOnly("com.h2database:h2")
	annotationProcessor("org.projectlombok:lombok:1.18.38")
//	implementation("org.apache.hadoop:hadoop-client-api:3.4.1")
//	implementation("org.apache.hadoop:hadoop-client-runtime:3.4.1")
//
//	// Explicitly add Hadoop common to ensure proper version
//	implementation("org.apache.hadoop:hadoop-common:3.4.1") {
//		exclude(group = "org.slf4j")
//		exclude(group = "log4j")
//		exclude(group = "org.apache.logging.log4j")
//		exclude(group = "com.sun.jersey")
//	}
	implementation("javax.servlet:javax.servlet-api:4.0.1")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.withType<Test> {
	useJUnitPlatform()
}

tasks.named("bootJar") {
	enabled = true
}

tasks.named("jar") {
	enabled = false
}

tasks.withType<JavaExec> {
	jvmArgs = listOf(
		"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
		"--add-opens=java.base/java.lang=ALL-UNNAMED",
		"--add-opens=java.base/java.nio=ALL-UNNAMED",
		"--add-exports=java.base/sun.security.action=ALL-UNNAMED"
	)
}

tasks.named<org.springframework.boot.gradle.tasks.run.BootRun>("bootRun") {
	jvmArgs = listOf(
		"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
		"--add-opens=java.base/java.lang=ALL-UNNAMED",
		"--add-opens=java.base/java.nio=ALL-UNNAMED",
		"--add-exports=java.base/sun.security.action=ALL-UNNAMED"
	)
}

//// Configure JVM arguments for Spark/Hadoop compatibility with Java 17+
//tasks.withType<JavaExec> {
//	jvmArgs = listOf(
//		"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
//		"--add-opens=java.base/java.io=ALL-UNNAMED",
//		"--add-opens=java.base/java.net=ALL-UNNAMED",
//		"--add-opens=java.base/java.nio=ALL-UNNAMED",
//		"--add-opens=java.base/java.util=ALL-UNNAMED",
//		"--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
//		"--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
//		"--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
//		"--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
//		"--add-opens=java.base/sun.security.action=ALL-UNNAMED",
//		"--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
//		"--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED"
//	)
//}
//
//tasks.named<org.springframework.boot.gradle.tasks.run.BootRun>("bootRun") {
//	jvmArgs = listOf(
//		"--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
//		"--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
//		"--add-opens=java.base/java.io=ALL-UNNAMED",
//		"--add-opens=java.base/java.net=ALL-UNNAMED",
//		"--add-opens=java.base/java.nio=ALL-UNNAMED",
//		"--add-opens=java.base/java.util=ALL-UNNAMED",
//		"--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
//		"--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
//		"--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
//		"--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
//		"--add-opens=java.base/sun.security.action=ALL-UNNAMED",
//		"--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
//		"--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED"
//	)
//}

